Calculate Power

public class Solution {
	public static int power(int x, int n) {
		if(n==0){
			 return 1;
		}
        int output=x*power(x, n-1);
        return output;
	}
}

Number of Digits

public class Solution {

	public static int countDigits(int n){
		if(n<10)
		   return 1;
		else
		   return 1+countDigits(n/10);
	}
}

Print First N Natural Numbers - Code

public class Solution {

	public static void print(int n){
		//Write your code here
		if(n==0){
			return;
		}
		print(n-1);
		System.out.print(n+" ");
	}
}

Sum Of Array

public class Solution {

	public static int sum(int input[]) {
	
		int n=input.length;
		if (n == 1){
           return input[0];
		}

        int temp[] = new int[input.length - 1];
        
        for(int i=0;i<input.length - 1;i++) {
            temp[i] = input[i+1];
        }
		int ans = sum(temp) + input[0];
        return ans;
	}
}

Check Number in Array

public class Solution {
	
	public static boolean checkNumber(int input[], int x) {
		 if (input.length==1)
        {
            if (input[0]==x)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
      
        int[] smallCheck = new int[input.length-1];
        for (int i=0;i<input.length-1;i++)
        {
            smallCheck[i]=input[i];
        }
        boolean output=checkNumber(smallCheck,x);
        return output;
	}
}

First Index Of a Number in an Array - Question


public class Solution {

	public static int firstIndex(int input[], int x) {
		if(input.length==0){
			return -1;
		}
		if(input[0] == x){
			return 0;
		}

		int smallArray[] = new int[input.length-1];
		for(int i=1; i<input.length; i++){
			smallArray[i-1] = input[i];
		}

		int fi = firstIndex(smallArray, x);
		if(fi == -1){
			return -1;
		}else{
			return fi+1;
		}
	}	
}


Last Index Of a Number in an Array - Question

public class Solution {
    public static int lastIndex(int input[], int x) {
        return lastIndexHelper(input, x, input.length - 1);
    }

    private static int lastIndexHelper(int input[], int x, int index) {
        if (index < 0) {
            return -1;
        }
        
        if (input[index] == x) {
            return index;
        }
        
        return lastIndexHelper(input, x, index - 1);
    }
}
